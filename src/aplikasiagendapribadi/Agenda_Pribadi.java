package aplikasiagendapribadi;

import java.io.BufferedWriter; // Mengimpor kelas BufferedWriter untuk menulis ke file
import java.io.FileNotFoundException; // Impor kelas FileNotFoundException untuk menangani pengecualian ketika file yang diperlukan tidak ditemukan
import java.io.FileWriter; // Mengimpor kelas FileWriter untuk membuat atau menulis ke file teks
import java.io.IOException; // Impor kelas IOException untuk menangani pengecualian terkait operasi I/O yang umum, seperti pembacaan atau penulisan file
import java.io.PrintWriter; // Impor kelas PrintWriter untuk menulis teks ke file
import javax.swing.DefaultListModel; // Mengimpor kelas DefaultListModel dari paket javax.swing untuk digunakan dalam GUI Swing
import javax.swing.JOptionPane; // Mengimpor kelas JOptionPane dari paket javax.swing untuk menampilkan dialog pesan

public class Agenda_Pribadi extends javax.swing.JFrame {

    /**
     * Creates new form Agenda_Pribadi
     */
    private DefaultListModel<String> listModel; // Mendeklarasikan variabel listModel sebagai objek DefaultListModel yang berisi objek String
    private javax.swing.JList<String> entryList; // Mendeklarasikan variabel entryList sebagai objek JList dengan tipe data String
    
    public Agenda_Pribadi() {
        initComponents(); // Memanggil metode initComponents() untuk inisialisasi komponen GUI
        this.setLocationRelativeTo(null); // Menempatkan frame di tengah saat aplikasi dijalankan
        listModel = new DefaultListModel<>(); // Menginisialisasi objek listModel
        entryList = jList1; // Menginisialisasi objek entryList
        entryList.setModel(listModel); // Mengatur model dari entryList dengan listModel
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("APLIKASI AGENDA PRIBADI");

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jTextArea1.setBackground(new java.awt.Color(204, 255, 255));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jList1.setBackground(new java.awt.Color(204, 255, 255));
        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        jButton1.setText("Tambah");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Edit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Hapus");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Keluar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Metode yang dipanggil saat tombol "Tambah" ditekan
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String newEntry = jTextArea1.getText(); // Mengambil teks dari JTextArea
        
        // Memastikan bahwa teks yang diambil tidak kosong atau null
        if (newEntry != null && !newEntry.isEmpty()) {
            listModel.addElement(newEntry); // Menambahkan entri baru ke objek listModel
            jList1.setSelectedIndex(listModel.getSize() - 1);
            
            // Menyimpan data ke file setelah menambahkan ke JList
            saveDataToFile();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    // Metode yang dipanggil saat tombol "Edit" ditekan
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedIndex = entryList.getSelectedIndex(); // Mendapatkan indeks terpilih dari JList
        
        // Memastikan bahwa indeks terpilih tidak kosong
        if (selectedIndex != -1) {
            
            // Menampilkan dialog input untuk mengubah agenda
            String updatedEntry = JOptionPane.showInputDialog(this, "Ubah agenda :", listModel.getElementAt
            (selectedIndex));
            if (updatedEntry != null && !updatedEntry.isEmpty()) {
                listModel.setElementAt(updatedEntry, selectedIndex); // Mengubah entri pada indeks terpilih dengan entri yang baru diinputkan
            
                // Perbarui data di file setelah mengubah data di GUI
                updateDataFile();
            }
        } else {
            // Menampilkan pesan kesalahan jika tidak ada agenda yang dipilih
            JOptionPane.showMessageDialog(this, "Pilih agenda yang akan diubah!");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Metode yang dipanggil saat tombol "Hapus" ditekan
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selectedIndex = entryList.getSelectedIndex(); // Mendapatkan indeks terpilih dari JList
        
        // Memastikan bahwa indeks terpilih tidak kosong
        if (selectedIndex != -1) {
            // Menampilkan dialog input untuk menghapus agenda
            int response = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus agenda ini?",
                    "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);

            // Memastikan bahwa pengguna menekan tombol "Yes"
            if (response == JOptionPane.YES_OPTION) {
                listModel.remove(selectedIndex); // Menghapus entri pada indeks terpilih dari JList
                
                // Memperbarui file data.txt setelah menghapus data dari JList
                updateDataFile();
            }
        } else {
            // Menampilkan pesan kesalahan jika tidak ada agenda yang dipilih
            JOptionPane.showMessageDialog(this, "Pilih agenda yang akan dihapus!");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    // Metode yang dipanggil saat tombol "Keluar" ditekan
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        System.exit(0); // Menghentikan aplikasi secara langsung
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Agenda_Pribadi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Agenda_Pribadi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Agenda_Pribadi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Agenda_Pribadi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Agenda_Pribadi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    // Metode untuk menyimpan data dari listModel ke file data.txt
    private void saveDataToFile() {
        try (FileWriter fileWriter = new FileWriter("data.txt");
            BufferedWriter bufferedWriter = new BufferedWriter(fileWriter)) {

            // Menulis/menyimpan setiap agenda dari listModel ke file
            for (int i = 0; i < listModel.getSize(); i++) {
                String entry = listModel.getElementAt(i);
                bufferedWriter.write(entry);
                bufferedWriter.newLine();
            }

            // Memberi tahu pengguna bahwa penyimpanan telah berhasil disimpan
            JOptionPane.showMessageDialog(this, "Data berhasil disimpan ke file data.txt",
                    "Sukses", JOptionPane.INFORMATION_MESSAGE);
           } catch (IOException ex) {
               
            // Menangani kesalahan jika ada masalah saat menulis ke file
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat menyimpan data ke file data.txt",
                    "Kesalahan", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
           }
       }
    
    // Metode untuk memperbarui file data.txt dengan informasi dari JList
    private void updateDataFile() {
        try (PrintWriter writer = new PrintWriter("data.txt")) { // Membuka PrintWriter untuk menulis ke file data.txt
            for (int i = 0; i < listModel.getSize(); i++) {
                writer.println(listModel.getElementAt(i)); // Menulis setiap elemen dari JList ke file data.txt
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }
}